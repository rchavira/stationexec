# Copyright 2004-present Facebook. All Rights Reserved.

# @lint-ignore-every PYTHON3COMPATIMPORTS1

from typing import List

"""
This file contains support routines for identifying and processing references
to results generated by other Operations.
"""


def looks_like_result_reference(value):
    # type: (str) -> bool
    """
    Does the result string have the form Operation:ResultName?

    :param str value: string to check
    :return: True if it could be a result reference
    :rtype: bool
    """
    return False if value is None or type(value) != str or ":" not in value else True


def reference_parse_parts(reference):
    # type: (str) -> List[str]
    """
    Split a result reference to another Operation's result into the component parts:
    i.e. the Operation name and the result name.

    :param str reference: the result reference
    :return: the operation name, the result name
    :rtype: Union[List[str],None]

    :raise ValueError: if reference is not a string or is not formatted as a reference
    """
    if reference is None or type(reference) != str or ':' not in reference:
        raise ValueError("invalid result reference")
    return reference.split(":", 2)


def operation_has_result(operation_list, reference):
    # type: (dict, str) -> bool
    """
    If the given reference appears to be of the form Operation:ResultName, then
    determine if the named Operation exists and generates the specified ResultName.

    :param dict operation_list: operations dict
    :param str reference: result reference string

    :return: True if Operation generates Result
    :rtype: bool
    """
    op_id, result_name = reference_parse_parts(reference)
    if op_id not in operation_list:
        return False
    known_results = operation_list[op_id]["operation_results"]
    matches = [output for output in known_results if output["name"] == result_name]
    return True if matches else False
